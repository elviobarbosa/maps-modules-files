{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://template-structure/./src/extension.ts","webpack://template-structure/./src/resources/scripts/check-folder.ts","webpack://template-structure/./src/resources/scripts/copy-files.ts","webpack://template-structure/./src/resources/scripts/format-prefix.ts","webpack://template-structure/./src/resources/scripts/replace-prefixes.ts","webpack://template-structure/external commonjs \"vscode\"","webpack://template-structure/external node-commonjs \"fs\"","webpack://template-structure/external node-commonjs \"path\"","webpack://template-structure/webpack/bootstrap","webpack://template-structure/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { copyFiles } from './resources/scripts/copy-files';\nimport { formatPrefix } from './resources/scripts/format-prefix';\nimport { checkFolderNames } from './resources/scripts/check-folder';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    console.log('Congratulations, your extension \"template-structure\" is now active!');\n\n    let disposable = vscode.commands.registerCommand('template-structure.create', async () => {\n\n        const templateFolders = await vscode.window.showOpenDialog({\n            canSelectFiles: false,\n            canSelectFolders: true,\n            canSelectMany: false,\n            openLabel: 'Select Template Folder'\n        });\n\n        if (!templateFolders || templateFolders.length === 0) {\n            return;\n        }\n\n        const templatePath = templateFolders[0].fsPath;\n\n        const selectedFolders = await vscode.window.showOpenDialog({\n            canSelectFiles: false,\n            canSelectFolders: true,\n            canSelectMany: false,\n            openLabel: 'Select Destination Folder'\n        });\n\n        if (!selectedFolders || selectedFolders.length === 0) {\n            return;\n        }\n\n        const destinationPath = selectedFolders[0].fsPath;\n\n        const prefix = await vscode.window.showInputBox({\n            prompt: 'Qual o nome do módulo?'\n        });\n\n        copyFiles(templatePath, destinationPath, formatPrefix(prefix));\n        checkFolderNames(destinationPath, formatPrefix(prefix));\n\n        vscode.window.showInformationMessage('Arquivos criados e nomes de pastas verificados com sucesso :]');\n    });\n\n    context.subscriptions.push(disposable);\n}","import * as fs from 'fs';\nimport * as path from 'path';\nimport { FormatedPrefixType } from './format-prefix';\n\nexport function checkFolderNames(destPath: string, prefix: FormatedPrefixType) {\n    const items = fs.readdirSync(destPath);\n\n    items.forEach(item => {\n        const itemPath = path.join(destPath, item);\n\n        if (fs.statSync(itemPath).isDirectory()) {\n            checkFolderNames(itemPath, prefix);\n        }\n\n        if (item.startsWith('PREFIX-KEBABCASE')) {\n            const newItemName = item.replace('PREFIX-KEBABCASE', prefix.kebabCase);\n            const newItemPath = path.join(destPath, newItemName);\n\n            if (!fs.existsSync(newItemPath)) {\n                fs.renameSync(itemPath, newItemPath);\n            }\n        }\n    });\n}","import * as fs from 'fs';\nimport * as path from 'path';\nimport { FormatedPrefixType } from './format-prefix';\nimport { replacePrefixes } from './replace-prefixes';\n\nexport function copyFiles(srcPath: string, destPath: string, prefix: FormatedPrefixType) {\n    if (!fs.existsSync(destPath)) {\n        fs.mkdirSync(destPath, { recursive: true });\n    }\n\n    const items = fs.readdirSync(srcPath);\n\n    items.forEach(item => {\n        const srcItemPath = path.join(srcPath, item);\n        const destItemPath = path.join(destPath, item);\n\n        const stats = fs.statSync(srcItemPath);\n\n        if (stats.isDirectory()) {\n           copyFiles(srcItemPath, destItemPath, prefix);\n        } else {\n            const newFileName = (item.startsWith('-') ? `${prefix.kebabCase}${item}` : `${prefix.kebabCase}.${item}`);\n            const newDestItemPath = path.join(destPath, newFileName);\n\n            const fileContent = fs.readFileSync(srcItemPath, 'utf-8');\n            const modifiedContent = replacePrefixes(fileContent, prefix);\n\n            fs.writeFileSync(newDestItemPath, modifiedContent);\n        }\n    });\n}","export type FormatedPrefixType = {\n    camelCase: string; \n    kebabCase: string\n}\n\nexport function formatPrefix(input: string = ''): FormatedPrefixType {\n    if (!input) {\n        return { camelCase: '', kebabCase: '' };\n    }\n    const words = input.split(' ');\n\n    const camelCase = words\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join('');\n\n    const kebabCase = words.join('-').toLowerCase();\n\n    return { camelCase, kebabCase };\n}","import { FormatedPrefixType } from \"./format-prefix\";\n\n/**\n * \n * @param content conteúdo do arquivo\n * @param prefixCamelCase prefixo em Camel Case\n * @param prefixKebabCase prefixo em Kebab Case \n * @returns \n */\nexport function replacePrefixes(content: string, prefix: FormatedPrefixType): string {\n    const camelCasePrefixRegex = /\\[PREFIX-CAMELCASE\\]/g;\n    const kebabCasePrefixRegex = /\\[PREFIX-KEBABCASE\\]/g;\n\n    return content\n        .replace(camelCasePrefixRegex, prefix.camelCase)\n        .replace(kebabCasePrefixRegex, prefix.kebabCase);\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["context","console","log","disposable","vscode","commands","registerCommand","async","templateFolders","window","showOpenDialog","canSelectFiles","canSelectFolders","canSelectMany","openLabel","length","templatePath","fsPath","selectedFolders","destinationPath","prefix","showInputBox","prompt","copyFiles","formatPrefix","checkFolderNames","showInformationMessage","subscriptions","push","destPath","fs","readdirSync","forEach","item","itemPath","path","join","statSync","isDirectory","startsWith","newItemName","replace","kebabCase","newItemPath","existsSync","renameSync","srcPath","mkdirSync","recursive","srcItemPath","destItemPath","newFileName","newDestItemPath","fileContent","readFileSync","modifiedContent","replacePrefixes","writeFileSync","input","camelCase","words","split","map","word","charAt","toUpperCase","slice","toLowerCase","content","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}