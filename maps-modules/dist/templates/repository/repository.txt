import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from 'projects/tesouraria/src/environments/environment';
import { Observable, map } from 'rxjs';
import { MapsPageResponse } from 'maps-angular-components';
import { SpringPageResponse } from 'projects/tesouraria/src/app/shared/interfaces/page.interface';
import { [PREFIX-CAMELCASE]ActiveBodyOutput, [PREFIX-CAMELCASE]Response } from '../entities/[PREFIX-KABEBCASE]-resgate-resquest-response.entity';

@Injectable({
  providedIn: 'root'
})
export class [PREFIX-CAMELCASE]Repository {

  constructor(private readonly _http: HttpClient) { }

  save(item: any): Observable<any> {
    return this._http.post<any>(`${environment.BACKEND_URL}/endpoint`, item);
  }

  list(query: string): Observable<MapsPageResponse<[PREFIX-CAMELCASE]Response>> {
    return this._http
      .get<SpringPageResponse<any>>(`${environment.BACKEND_URL}/endpoint/?${query}`)
      .pipe(
        map((res: SpringPageResponse<any>) => {
          return {
            content: res.content,
            metadata: {
              number: res.number,
              size: res.size,
              totalElements: res.totalElements,
              totalPages: res.totalPages,
            },
          };
        })
      );
  }

  byId(id: number): Observable<any> {
    return this._http.get<any>(`${environment.BACKEND_URL}/endpoint/${id}`);
  }

  update(data: any): Observable<any> {
    return this._http.put<any>(`${environment.BACKEND_URL}/endpoint`, data);
  }

  delete(id: number): Observable<any> {
    return this._http.delete<any>(`${environment.BACKEND_URL}/endpoint/${id}`);
  }

  activeDeactive(data: [PREFIX-CAMELCASE]ActiveBodyOutput): Observable<any> {
    return this._http.put<any>(`${environment.BACKEND_URL}/endpoint/${data.id}`, data.active);
  }
}